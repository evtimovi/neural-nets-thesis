(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    350986,       7226]
NotebookOptionsPosition[    349558,       7176]
NotebookOutlinePosition[    349920,       7192]
CellTagsIndexPosition[    349877,       7189]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Data Import", "Text",
 CellChangeTimes->{{3.694950184821402*^9, 3.694950200977116*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\</Users/ivanevtimov/GDrive-Laf/THESIS/Results with more \
subjects/howfar_data.csv\>\"", ",", 
     RowBox[{"HeaderLines", "\[Rule]", " ", "1"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subjectID", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fbGenuine", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rcGenuine", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "3"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"imposterID", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "4"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fbImposter", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "5"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rcImposter", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "6"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.694949662855568*^9, 3.694949706528145*^9}, {
  3.694949862904303*^9, 3.694949874248372*^9}, {3.6949499207710133`*^9, 
  3.6949500053398933`*^9}}],

Cell[TextData[{
 "Histogram of the genuine and imposter distributions when measuring the \
distance between the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["fb",
  FontWeight->"Bold"],
 " images."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fbGenuine", ",", "fbImposter"}], "}"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Blue", ",", "Red"}], "}"}]}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Genuine\>\"", ",", " ", "\"\<Imposter\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{
      Directive[
       EdgeForm[
        Directive[
         Thickness[Small], 
         Opacity[0.595]]], 
       RGBColor[
       0.987148, 0.8073604000000001, 0.49470040000000004`]], {{{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[0, 0, 1]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{6., 0.}, {8., 2}, "RoundingRadius" -> 0]}]}, 
               StatusArea[#, 2]& , TagBoxNote -> "2"], 
              StyleBox["2", {}, StripOnInput -> False]], Annotation[#, 
              Style[2, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{8., 0.}, {10., 39}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 39]& , TagBoxNote -> "39"], 
              StyleBox["39", {}, StripOnInput -> False]], Annotation[#, 
              Style[39, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{10., 0.}, {12., 103}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 103]& , TagBoxNote -> "103"], 
              StyleBox["103", {}, StripOnInput -> False]], Annotation[#, 
              Style[103, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{12., 0.}, {14., 102}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 102]& , TagBoxNote -> "102"], 
              StyleBox["102", {}, StripOnInput -> False]], Annotation[#, 
              Style[102, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{14., 0.}, {16., 95}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 95]& , TagBoxNote -> "95"], 
              StyleBox["95", {}, StripOnInput -> False]], Annotation[#, 
              Style[95, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{16., 0.}, {18., 49}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 49]& , TagBoxNote -> "49"], 
              StyleBox["49", {}, StripOnInput -> False]], Annotation[#, 
              Style[49, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{18., 0.}, {20., 18}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 18]& , TagBoxNote -> "18"], 
              StyleBox["18", {}, StripOnInput -> False]], Annotation[#, 
              Style[18, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{20., 0.}, {22., 4}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 4]& , TagBoxNote -> "4"], 
              StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
              Style[4, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{22., 0.}, {24., 5}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 5]& , TagBoxNote -> "5"], 
              StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
              Style[5, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[1, 0, 0]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 24}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 24]& , TagBoxNote -> "24"], 
              StyleBox["24", {}, StripOnInput -> False]], Annotation[#, 
              Style[24, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{22., 0.}, {24., 94}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 94]& , TagBoxNote -> "94"], 
              StyleBox["94", {}, StripOnInput -> False]], Annotation[#, 
              Style[94, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{24., 0.}, {26., 156}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 156]& , TagBoxNote -> "156"], 
              StyleBox["156", {}, StripOnInput -> False]], Annotation[#, 
              Style[156, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{26., 0.}, {28., 120}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 120]& , TagBoxNote -> "120"], 
              StyleBox["120", {}, StripOnInput -> False]], Annotation[#, 
              Style[120, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{28., 0.}, {30., 22}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 22]& , TagBoxNote -> "22"], 
              StyleBox["22", {}, StripOnInput -> False]], Annotation[#, 
              Style[22, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{30., 0.}, {32., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], 
              "Tooltip"]& ]}}}, {}, {}}}}}, {{{{{}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {}}}, {{{{}, {}, {}, {}, {}, {}}, {}}}}}, {
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {5.48, 0.}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{6., 32.}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Genuine\"", "\"Imposter\""}, "SwatchLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[0, 0, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[1, 0, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", "None", "}"}]}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}}]
}, Open  ]],

Cell[TextData[{
 "Histogram of the genuine and imposter distributions when measuring the \
distance between the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["rc",
  FontWeight->"Bold"],
 " images."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}, {
  3.694950238244871*^9, 3.694950238427281*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"rcGenuine", ",", "rcImposter"}], "}"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Blue", ",", "Red"}], "}"}]}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Genuine\>\"", ",", " ", "\"\<Imposter\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}, {
  3.694950241100892*^9, 3.6949502440435*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{
      Directive[
       EdgeForm[
        Directive[
         Thickness[Small], 
         Opacity[0.602]]], 
       RGBColor[
       0.987148, 0.8073604000000001, 0.49470040000000004`]], {{{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.602]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[0, 0, 1]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{8., 0.}, {10., 3}, "RoundingRadius" -> 0]}]}, 
               StatusArea[#, 3]& , TagBoxNote -> "3"], 
              StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
              Style[3, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{10., 0.}, {12., 19}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 19]& , TagBoxNote -> "19"], 
              StyleBox["19", {}, StripOnInput -> False]], Annotation[#, 
              Style[19, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{12., 0.}, {14., 70}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 70]& , TagBoxNote -> "70"], 
              StyleBox["70", {}, StripOnInput -> False]], Annotation[#, 
              Style[70, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{14., 0.}, {16., 112}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 112]& , TagBoxNote -> "112"], 
              StyleBox["112", {}, StripOnInput -> False]], Annotation[#, 
              Style[112, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{16., 0.}, {18., 107}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 107]& , TagBoxNote -> "107"], 
              StyleBox["107", {}, StripOnInput -> False]], Annotation[#, 
              Style[107, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{18., 0.}, {20., 64}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 64]& , TagBoxNote -> "64"], 
              StyleBox["64", {}, StripOnInput -> False]], Annotation[#, 
              Style[64, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 26}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 26]& , TagBoxNote -> "26"], 
              StyleBox["26", {}, StripOnInput -> False]], Annotation[#, 
              Style[26, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{22., 0.}, {24., 9}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 9]& , TagBoxNote -> "9"], 
              StyleBox["9", {}, StripOnInput -> False]], Annotation[#, 
              Style[9, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{24., 0.}, {26., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{26., 0.}, {28., 6}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 6]& , TagBoxNote -> "6"], 
              StyleBox["6", {}, StripOnInput -> False]], Annotation[#, 
              Style[6, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.602]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[1, 0, 0]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{18., 0.}, {20., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 14}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 14]& , TagBoxNote -> "14"], 
              StyleBox["14", {}, StripOnInput -> False]], Annotation[#, 
              Style[14, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{22., 0.}, {24., 71}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 71]& , TagBoxNote -> "71"], 
              StyleBox["71", {}, StripOnInput -> False]], Annotation[#, 
              Style[71, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{24., 0.}, {26., 162}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 162]& , TagBoxNote -> "162"], 
              StyleBox["162", {}, StripOnInput -> False]], Annotation[#, 
              Style[162, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{26., 0.}, {28., 125}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 125]& , TagBoxNote -> "125"], 
              StyleBox["125", {}, StripOnInput -> False]], Annotation[#, 
              Style[125, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{28., 0.}, {30., 41}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 41]& , TagBoxNote -> "41"], 
              StyleBox["41", {}, StripOnInput -> False]], Annotation[#, 
              Style[41, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{30., 0.}, {32., 3}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 3]& , TagBoxNote -> "3"], 
              StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
              Style[3, {}], 
              "Tooltip"]& ]}}}, {}, {}}}}}, {{{{{}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {}}}, {{{{}, {}, {}, {}, {}, {}, {}}, {}}}}}, {
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {7.52, 0.}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{8., 32.}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Genuine\"", "\"Imposter\""}, "SwatchLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.602]]], 
                    RGBColor[0, 0, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.602]]], 
                    RGBColor[1, 0, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.602`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", "None", "}"}]}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}, 
   3.6949502451716013`*^9}]
}, Open  ]],

Cell[TextData[{
 "Histogram of the genuine and imposter distributions when measuring the \
distance between the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["fb",
  FontWeight->"Bold"],
 " ",
 StyleBox["and",
  FontSlant->"Italic"],
 " the ",
 StyleBox["rc",
  FontWeight->"Bold"],
 " images."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}, {
  3.694950238244871*^9, 3.694950238427281*^9}, {3.6949504192406607`*^9, 
  3.694950421456979*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fbGenuine", ",", "rcGenuine", ",", "fbImposter", ",", "rcImposter"}], 
    "}"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"LightBlue", ",", "Blue", ",", "LightRed", ",", "Red"}], "}"}]}],
    ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<FB Genuine\>\"", ",", "\"\<RC Genuine\>\"", ",", 
      "\"\<FB Imposter\>\"", " ", ",", "\"\<RC Imposter\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}, {
  3.694950241100892*^9, 3.6949502440435*^9}, {3.6949502913665*^9, 
  3.694950370055814*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{
      Directive[
       EdgeForm[
        Directive[
         Thickness[Small], 
         Opacity[0.595]]], 
       RGBColor[
       0.987148, 0.8073604000000001, 0.49470040000000004`]], {{{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[0.87, 0.94, 1]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{6., 0.}, {8., 2}, "RoundingRadius" -> 0]}]}, 
               StatusArea[#, 2]& , TagBoxNote -> "2"], 
              StyleBox["2", {}, StripOnInput -> False]], Annotation[#, 
              Style[2, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{8., 0.}, {10., 39}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 39]& , TagBoxNote -> "39"], 
              StyleBox["39", {}, StripOnInput -> False]], Annotation[#, 
              Style[39, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{10., 0.}, {12., 103}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 103]& , TagBoxNote -> "103"], 
              StyleBox["103", {}, StripOnInput -> False]], Annotation[#, 
              Style[103, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{12., 0.}, {14., 102}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 102]& , TagBoxNote -> "102"], 
              StyleBox["102", {}, StripOnInput -> False]], Annotation[#, 
              Style[102, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{14., 0.}, {16., 95}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 95]& , TagBoxNote -> "95"], 
              StyleBox["95", {}, StripOnInput -> False]], Annotation[#, 
              Style[95, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{16., 0.}, {18., 49}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 49]& , TagBoxNote -> "49"], 
              StyleBox["49", {}, StripOnInput -> False]], Annotation[#, 
              Style[49, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{18., 0.}, {20., 18}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 18]& , TagBoxNote -> "18"], 
              StyleBox["18", {}, StripOnInput -> False]], Annotation[#, 
              Style[18, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{20., 0.}, {22., 4}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 4]& , TagBoxNote -> "4"], 
              StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
              Style[4, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{22., 0.}, {24., 5}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 5]& , TagBoxNote -> "5"], 
              StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
              Style[5, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[0, 0, 1]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{8., 0.}, {10., 3}, "RoundingRadius" -> 0]}]}, 
               StatusArea[#, 3]& , TagBoxNote -> "3"], 
              StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
              Style[3, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{10., 0.}, {12., 19}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 19]& , TagBoxNote -> "19"], 
              StyleBox["19", {}, StripOnInput -> False]], Annotation[#, 
              Style[19, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{12., 0.}, {14., 70}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 70]& , TagBoxNote -> "70"], 
              StyleBox["70", {}, StripOnInput -> False]], Annotation[#, 
              Style[70, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{14., 0.}, {16., 112}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 112]& , TagBoxNote -> "112"], 
              StyleBox["112", {}, StripOnInput -> False]], Annotation[#, 
              Style[112, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{16., 0.}, {18., 107}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 107]& , TagBoxNote -> "107"], 
              StyleBox["107", {}, StripOnInput -> False]], Annotation[#, 
              Style[107, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{18., 0.}, {20., 64}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 64]& , TagBoxNote -> "64"], 
              StyleBox["64", {}, StripOnInput -> False]], Annotation[#, 
              Style[64, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 26}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 26]& , TagBoxNote -> "26"], 
              StyleBox["26", {}, StripOnInput -> False]], Annotation[#, 
              Style[26, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{22., 0.}, {24., 9}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 9]& , TagBoxNote -> "9"], 
              StyleBox["9", {}, StripOnInput -> False]], Annotation[#, 
              Style[9, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{24., 0.}, {26., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{26., 0.}, {28., 6}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 6]& , TagBoxNote -> "6"], 
              StyleBox["6", {}, StripOnInput -> False]], Annotation[#, 
              Style[6, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[1, 0.85, 0.85]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 24}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 24]& , TagBoxNote -> "24"], 
              StyleBox["24", {}, StripOnInput -> False]], Annotation[#, 
              Style[24, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{22., 0.}, {24., 94}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 94]& , TagBoxNote -> "94"], 
              StyleBox["94", {}, StripOnInput -> False]], Annotation[#, 
              Style[94, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{24., 0.}, {26., 156}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 156]& , TagBoxNote -> "156"], 
              StyleBox["156", {}, StripOnInput -> False]], Annotation[#, 
              Style[156, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{26., 0.}, {28., 120}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 120]& , TagBoxNote -> "120"], 
              StyleBox["120", {}, StripOnInput -> False]], Annotation[#, 
              Style[120, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{28., 0.}, {30., 22}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 22]& , TagBoxNote -> "22"], 
              StyleBox["22", {}, StripOnInput -> False]], Annotation[#, 
              Style[22, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{30., 0.}, {32., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[1, 0, 0]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{18., 0.}, {20., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{20., 0.}, {22., 14}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 14]& , TagBoxNote -> "14"], 
              StyleBox["14", {}, StripOnInput -> False]], Annotation[#, 
              Style[14, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{22., 0.}, {24., 71}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 71]& , TagBoxNote -> "71"], 
              StyleBox["71", {}, StripOnInput -> False]], Annotation[#, 
              Style[71, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{24., 0.}, {26., 162}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 162]& , TagBoxNote -> "162"], 
              StyleBox["162", {}, StripOnInput -> False]], Annotation[#, 
              Style[162, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{26., 0.}, {28., 125}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 125]& , TagBoxNote -> "125"], 
              StyleBox["125", {}, StripOnInput -> False]], Annotation[#, 
              Style[125, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{28., 0.}, {30., 41}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 41]& , TagBoxNote -> "41"], 
              StyleBox["41", {}, StripOnInput -> False]], Annotation[#, 
              Style[41, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{30., 0.}, {32., 3}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 3]& , TagBoxNote -> "3"], 
              StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
              Style[3, {}], 
              "Tooltip"]& ]}}}, {}, {}}}}}, {{{{{}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {}}}, {{{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {}}}, {{{{}, {}, \
{}, {}, {}, {}}, {}}}, {{{{}, {}, {}, {}, {}, {}, {}}, {}}}}}, {
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {5.48, 0.}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{6., 32.}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"FB Genuine\"", "\"RC Genuine\"", "\"FB Imposter\"", 
       "\"RC Imposter\""}, "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[0.87, 0.94, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[0, 0, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[1, 0.85, 0.85]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[1, 0, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.87, 0.94, 1]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.85, 0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6666666666666666, 0.5666666666666667, 
                    0.5666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0.85, 0.85]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.85, 0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.85, 0.85], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   
                   RowBox[{
                    "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                    "Automatic"}], "}"}], ",", 
                 RowBox[{"{", "None", "}"}]}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}, 
   3.6949502451716013`*^9, 3.694950370852537*^9}]
}, Open  ]],

Cell[TextData[{
 "Histogram of the genuine distributions when measuring the distance between \
the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["fb",
  FontWeight->"Bold"],
 " ",
 StyleBox["and",
  FontSlant->"Italic"],
 " the ",
 StyleBox["rc",
  FontWeight->"Bold"],
 " images."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}, {
  3.694950238244871*^9, 3.694950238427281*^9}, {3.6949504192406607`*^9, 
  3.694950440441794*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fbGenuine", ",", "rcGenuine", ",", "fbImposter", ",", "rcImposter"}], 
    "}"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Green", ",", "Magenta"}], "}"}]}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<FB Genuine\>\"", ",", "\"\<RC Genuine\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}, {
  3.694950241100892*^9, 3.6949502440435*^9}, {3.6949502913665*^9, 
  3.694950370055814*^9}, {3.694950461485366*^9, 3.694950513740334*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{
      Directive[
       EdgeForm[
        Directive[
         Thickness[Small], 
         Opacity[0.595]]], 
       RGBColor[
       0.987148, 0.8073604000000001, 0.49470040000000004`]], {{{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[0, 1, 0]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{6., 0.}, {8., 2}, "RoundingRadius" -> 0]}]}, 
               StatusArea[#, 2]& , TagBoxNote -> "2"], 
              StyleBox["2", {}, StripOnInput -> False]], Annotation[#, 
              Style[2, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{8., 0.}, {10., 39}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 39]& , TagBoxNote -> "39"], 
              StyleBox["39", {}, StripOnInput -> False]], Annotation[#, 
              Style[39, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{10., 0.}, {12., 103}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 103]& , TagBoxNote -> "103"], 
              StyleBox["103", {}, StripOnInput -> False]], Annotation[#, 
              Style[103, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{12., 0.}, {14., 102}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 102]& , TagBoxNote -> "102"], 
              StyleBox["102", {}, StripOnInput -> False]], Annotation[#, 
              Style[102, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{14., 0.}, {16., 95}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 95]& , TagBoxNote -> "95"], 
              StyleBox["95", {}, StripOnInput -> False]], Annotation[#, 
              Style[95, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{16., 0.}, {18., 49}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 49]& , TagBoxNote -> "49"], 
              StyleBox["49", {}, StripOnInput -> False]], Annotation[#, 
              Style[49, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{18., 0.}, {20., 18}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 18]& , TagBoxNote -> "18"], 
              StyleBox["18", {}, StripOnInput -> False]], Annotation[#, 
              Style[18, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{20., 0.}, {22., 4}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 4]& , TagBoxNote -> "4"], 
              StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
              Style[4, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{22., 0.}, {24., 5}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 5]& , TagBoxNote -> "5"], 
              StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
              Style[5, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[1, 0, 1]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{8., 0.}, {10., 3}, "RoundingRadius" -> 0]}]}, 
               StatusArea[#, 3]& , TagBoxNote -> "3"], 
              StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
              Style[3, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{10., 0.}, {12., 19}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 19]& , TagBoxNote -> "19"], 
              StyleBox["19", {}, StripOnInput -> False]], Annotation[#, 
              Style[19, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{12., 0.}, {14., 70}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 70]& , TagBoxNote -> "70"], 
              StyleBox["70", {}, StripOnInput -> False]], Annotation[#, 
              Style[70, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{14., 0.}, {16., 112}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 112]& , TagBoxNote -> "112"], 
              StyleBox["112", {}, StripOnInput -> False]], Annotation[#, 
              Style[112, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{16., 0.}, {18., 107}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 107]& , TagBoxNote -> "107"], 
              StyleBox["107", {}, StripOnInput -> False]], Annotation[#, 
              Style[107, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{18., 0.}, {20., 64}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 64]& , TagBoxNote -> "64"], 
              StyleBox["64", {}, StripOnInput -> False]], Annotation[#, 
              Style[64, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 26}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 26]& , TagBoxNote -> "26"], 
              StyleBox["26", {}, StripOnInput -> False]], Annotation[#, 
              Style[26, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{22., 0.}, {24., 9}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 9]& , TagBoxNote -> "9"], 
              StyleBox["9", {}, StripOnInput -> False]], Annotation[#, 
              Style[9, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{24., 0.}, {26., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{26., 0.}, {28., 6}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 6]& , TagBoxNote -> "6"], 
              StyleBox["6", {}, StripOnInput -> False]], Annotation[#, 
              Style[6, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[0, 1, 0]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 24}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 24]& , TagBoxNote -> "24"], 
              StyleBox["24", {}, StripOnInput -> False]], Annotation[#, 
              Style[24, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{22., 0.}, {24., 94}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 94]& , TagBoxNote -> "94"], 
              StyleBox["94", {}, StripOnInput -> False]], Annotation[#, 
              Style[94, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{24., 0.}, {26., 156}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 156]& , TagBoxNote -> "156"], 
              StyleBox["156", {}, StripOnInput -> False]], Annotation[#, 
              Style[156, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{26., 0.}, {28., 120}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 120]& , TagBoxNote -> "120"], 
              StyleBox["120", {}, StripOnInput -> False]], Annotation[#, 
              Style[120, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{28., 0.}, {30., 22}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 22]& , TagBoxNote -> "22"], 
              StyleBox["22", {}, StripOnInput -> False]], Annotation[#, 
              Style[22, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{30., 0.}, {32., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}}}, {}, {}}}, {{{}, {
          Directive[
           Opacity[0.5], 
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.595]]], 
            RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], 
           Directive[
            RGBColor[1, 0, 1]]], {{
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{18., 0.}, {20., 1}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{20., 0.}, {22., 14}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 14]& , TagBoxNote -> "14"], 
              StyleBox["14", {}, StripOnInput -> False]], Annotation[#, 
              Style[14, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{22., 0.}, {24., 71}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 71]& , TagBoxNote -> "71"], 
              StyleBox["71", {}, StripOnInput -> False]], Annotation[#, 
              Style[71, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{24., 0.}, {26., 162}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 162]& , TagBoxNote -> "162"], 
              StyleBox["162", {}, StripOnInput -> False]], Annotation[#, 
              Style[162, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{26., 0.}, {28., 125}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 125]& , TagBoxNote -> "125"], 
              StyleBox["125", {}, StripOnInput -> False]], Annotation[#, 
              Style[125, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  
                  RectangleBox[{28., 0.}, {30., 41}, "RoundingRadius" -> 
                   0]}]}, StatusArea[#, 41]& , TagBoxNote -> "41"], 
              StyleBox["41", {}, StripOnInput -> False]], Annotation[#, 
              Style[41, {}], "Tooltip"]& ]}, {
            TagBox[
             TooltipBox[
              TagBox[{
                DynamicBox[{
                  FEPrivate`If[
                   CurrentValue["MouseOver"], 
                   EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                  RectangleBox[{30., 0.}, {32., 3}, "RoundingRadius" -> 0]}]},
                StatusArea[#, 3]& , TagBoxNote -> "3"], 
              StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
              Style[3, {}], 
              "Tooltip"]& ]}}}, {}, {}}}}}, {{{{{}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {}}}, {{{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {}}}, {{{{}, {}, \
{}, {}, {}, {}}, {}}}, {{{{}, {}, {}, {}, {}, {}, {}}, {}}}}}, {
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {5.48, 0.}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{6., 32.}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"FB Genuine\"", "\"RC Genuine\""}, "SwatchLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[0, 1, 0]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.595]]], 
                    RGBColor[1, 0, 1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.595`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[1], Editable -> False, Selectable -> False]}], 
                    "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", "None", "}"}]}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}, 
   3.6949502451716013`*^9, 3.694950370852537*^9, {3.694950509855113*^9, 
   3.694950514467827*^9}}]
}, Open  ]],

Cell[TextData[{
 "List plot of the genuine distributions when measuring the distance between \
the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["fb",
  FontWeight->"Bold"],
 " ",
 StyleBox["and",
  FontSlant->"Italic"],
 " the ",
 StyleBox["rc",
  FontWeight->"Bold"],
 " images."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}, {
  3.694950238244871*^9, 3.694950238427281*^9}, {3.6949504192406607`*^9, 
  3.694950440441794*^9}, {3.6949505581190042`*^9, 3.694950559117403*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fbGenuine", ",", "rcGenuine", ",", "fbImposter", ",", "rcImposter"}], 
    "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Green", ",", "Magenta"}], "}"}]}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<FB Genuine\>\"", ",", "\"\<RC Genuine\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}, {
  3.694950241100892*^9, 3.6949502440435*^9}, {3.6949502913665*^9, 
  3.694950370055814*^9}, {3.694950461485366*^9, 3.694950513740334*^9}, {
  3.694950560886322*^9, 3.694950572006558*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 1, 0]], 
        PointBox[CompressedData["
1:eJxdWGlwVUUWPqAFzIgQFmUUZt4FWcYgEAmLLPq+sBMEA0kIWeDdJC/79vaF
mUoug4oLSFxYLJFcwRqWcYloCQwluYIi44BGBEvRIRdEBFSIUGogxJ5Auqk6
L39S5/Xt7rN+5zs9MK9qQUFnInqlE9H1/x1/zc73fxeOgysHQv6Aa1+Ipspn
h0u5G0Z1ITowa4CU49C3iMg9faiU+8KRSdqad+6T8p9w4IqoK35qiJQHYPEp
4Rz+pVrXMOa4EB/OUvIgbLuXrPSv1X2DseET0bDj8DgpD43R56+4Oo7IfnG0
lOMx6YwQB04mSPk+NO0X4upm9f1IVBJZr59V+iSgJIv0jabS/35896kQrRdH
SXk0Eu8m68yVwVJORHWrqHME46U8Jsb+seiXTHbqDyOlPA7bZpP2z3HKvvF4
qDvZ/fap/Q/ctKPj/wS8/JkQO/Yo/SeidDGZJ1rVeZOwuE44k0co/SZjfLv5
a1eMkPKD+Hs2WXHbh0n5IbwK0gsKlP5OvN6T7Me63i9loGd/wr76eztkA0h6
U4gzk9X+JOxtEXUr7pT5YCThdDcyV86+R65PwewToq7lY6mvMQVN7fmxYZM6
fyq27hcO9wvyPGNqjL3T4P8DGRdGyvOMafw8mo4u54TLUy31N6bjQhKZF95Q
/puBrzqRNryv2j8D69uu+0+T6zPRo13/t6rlfcbMmPjP4vlpzIqxfzaWDCF0
7yX9b8yG+37CKl36i5Lx+Fyyk1qlPkZyjH1z5H+1fw5+TSF71HYVr4cxZBBp
Y3vI/DQe5v6mudh7O1FLT+XfuVg9mawdh1W+zUNCBmHmjyp+8/DFeDImPazi
/QjeuiYcXdzKP4+gV3t97wgo/VMw531Rc3a91Acp8neZr0YK/meJhom3y3Ur
BenjSM8eoOpt/o14VF6V+mA+1l0VDaNPDJL75+P0IdEw6RGpvzUfnhntWs1T
8VuAW/aLmpv1hAUx/lpww76PnpD6Wgvw7h7RsKZV1VMqzx+k4rfDwnGhn/JX
Kq70Ib1ntbo/FVfvJHP18yo+aRg4meixeCkjDStuJ+2V8ypf05D1x+v2Snus
NKxeK1zaJpU/6ThxC1nZ1er+dI5vRjp2DyZz5hp1fzou/yKcG7fI82ghum4T
dZ9ulfZiIdfXWNiRbyG5bi3E8B+E45hb5U8Gls8kPems8l8G5v8kmnYXKP9l
cDywMuQ+5f9F2HdZOIo9Mp5YFFPPi3BcJ/PQBuX/RbBSCZlnlP8ysa8PGZF4
tT8T7zeKmoz9an8mkjsRnrxL5qOViedahGPKFWV/FkKdyHomTcrI4nhpZHF8
trJ4fChb/pf3IRvmb6Jp6qOyXxjZaLsiamq+VPpnY9lJ0XDT35TD8RQ53B4j
By+cuq6vlK0cVN1D+t5c5b/F2NOVjJ0vKf8vxrx40rPOKfsXY9UEMnxPyHVr
MY8XLcGf+5B9OVHWP5agbTIZdrWyfwle/lm4lp+Q9lhLeHzJhV8TyHC9pux3
IfmkaNo1St3v4v60XDH5o/P+punYfSvht6kqH3X5ndRX12PwSufxMHVuv6Vz
fLH1mP6Ui+ebRNOyS9K/Wi6vL+Ri2UbRcLPf67m8Hxq5vJ7NXHmuyrdcuH8R
rmv7Bsn7c3F0DOFvFYpP5PH60vJu9IcRV8fK+/M68PJBmR96HhZmEr0Wp/Ah
j/cLM4/ng5WHed8L1+5N0v92Hvq4ybrnYxW/fOCiaOiaqO7Pl78rPM3HHaeF
c9Ax2U/1fDy+RdSM8st1Ix93DiMsr5LrZj4+f0M4J6yW+lr5OOggY0I/+b2d
j6GdyXKnqvi7eb/Q3Jx/wc3v0924t4zMtT7VL93wtgixar3EP9ONOUVkL31X
7rfcPJ62m/czKuD1qBXw/oiCG/6LPp0o7y9Arz3C8dlE1W8LEB5NZk28PN8s
QP5/RV3/0wovCnB+jWj4+lPpD7uA9zMqvMEv6l+V+miFvL+isKNe/iK/1wt5
PzMKeX2bhZyfWoUcv+zCGD5WdCP+H20eI+8vkr/LdRRxvqIXcbwwinh/N4uw
sE00PPXAIHl/EeaWkjYppOqvSOazQ95TzO3RivFBJllfDVB4WIxsIVx7uij/
F2NonXAlHlP+L8alrqR/UqzyvxjRS6JpY6n83ipGlpO0nK2yPu1irj+V4NQ5
0TTnDrmulXC8QgnOXBJ1KxtU/pcgrn1Y+YdT8jujJOb+Ejz4u6gLfyv5k1XC
+ZFd0oHfu1X/LuV8Wyvl/BGlPB56KXZNa59q1iv8KcWyboSE4/J7sxQvXRCO
qb0V3pZyf9mlvD6ojPdTrYznC8rQ+VvRVHVS3V+GMeuEOL1A4U8Zn7fMMuw4
JuoKDqj7y5D+uRDnLqj4l+GVncLxbbniT+XYMoPs785JWSvnfBbl8jsV/3L0
PyzqjtSq/lTO68ksx9uT2lnICsVXyjF9jXD0e0/Fvxw1uYRe89T8UsHXtQo+
T6GCzzd6Bfp0Iv3Skwr/KnD5eyHausr4mRXo1pOQ1FvG16rg/rMrOJ5RJQqF
aOi+QOaLVsnzA5Xo972o2TRF1V9lDL+rRGoqGf9yqv5TiZ5fCmfuovHy/krO
X+1KjldUxfmgVsXrEVWcH+lVKDsumnLWqXmoCivHEW7yebMK0SOi5pNhqv9W
xdxfxfsXefj8HefhfFzz8PkwwROTHx6uf4oHTySQ9fN9ql49SOtDVnJI6uPx
YP1B4bw0Wunv4fGu9fB5wvRg7wjSu/WU59V7eL5bHp4fjR7Oj2wPfmrHg8P/
kfyi2QNzYnsXSlD47+X9Ls6LzHY8bVXvBZoXz74o6vTuMl8TvHjvvHBtSZb6
wMvxIsXL50Pdy/HJ4+X81/Dy+q/1cvw1vTy/6724bSxpz81QfNSLO24l0zdY
8pVGL5+/bO8N/P3moPR3szfm/cHH6z/OB/1D4eg/UNnv4/Nzgo/XA3y8H6f4
eP3pPt6/PD782JmMl3eoedSHZ+4i7VSL9Getj/MV08fjWe/j/djycb7c6MM3
74mapYMV3/J11Gu9st+Hi53IXrVK8Q8/n+/j/CjqS1rbc4qP+jl+JPg5XsHP
+VOKn+OB7ufzgscP71AyqzNV//ZzPKr1x+Cpn+dnvZ/jk+Xn9d3o5/3P9uPN
3qR1cUv8bvbHzA8BZHwhnOebpT/iAphy5Pp+GQ8tEBP/AIY0CcfRoTKfEeD4
mRKAcJDe+Jg8Tw9Am0DWtGHK/gDvD0agoz8lSXtrAzHzRADruhF9PknVfyBm
nglwfzYGOJ+2A3j0A1HXkCb1bw5gdxGZWz9Q7x9B/h4RF+T9Ugty/poQ5PML
gvIceX5KEGXrRFNrtZoXgrh7uxA38dIT5HhnBLH538K1uVqeVxvk+WYGeb+o
D/L3TCso38ckf2wMou0r4ajKlP6yg2hpFK4LB+X3zUHO3ymE3gPJmvKZlONC
HO+1EGauF66Mngr/Q4g/K5rSdin8C8lzpD0pIc539BAutuNR2waJj54Q50dG
iON9bYjzRVOdr+IfgnCSZR5S9R/ifL8xhLWzyErcqfh2CLOTiLZnSfuaQxyf
KMzzLS7Mv9fC/P0gIYzKqWT1GKTm4zDP55RwTPzDPD89MecbYdQdFc7EHhJv
asO8P5ph/v5ZH+bzuxXm77GNYc6n7TD6twrn8ipZn81habfCvwifp+MiONqF
zKcOyfO0CJ9nEyL4uICsrJGKn0Vw2xHRYF9V+R+JiX+Ev6d7IjHvuRHOb2oj
3J9mhPOH+gjvV1aE10djBNdyyK7/SfrbjtGnOdIxT8yWeEhRjtdxUc6vtCje
2SVq0nOkvQlRzv8Q5f0iJcrfd/Qox0dPFDv3CnGsWuF/lL+P10Y5HppRtDSL
hoemqvyPxsQ/yuf5xiierhfOm/61o5yvNUc5n6KleLtFON8tVPi/FKmNomFb
n3j8HzhhA8Y=
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[1, 0, 1]], 
        PointBox[CompressedData["
1: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
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 1, 0]], 
        PointBox[CompressedData["
1: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
         "]]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[1, 0, 1]], 
        PointBox[CompressedData["
1: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
         
         "]]}, {}}}, {}, {}, {{}, {}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 417.}, {0, 30.8544960022}}, PlotRangeClipping -> True,
      ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 417.}, {0, 30.8544960022}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"FB Genuine\"", "\"RC Genuine\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}, 
   3.6949502451716013`*^9, 3.694950370852537*^9, {3.694950509855113*^9, 
   3.694950514467827*^9}, 3.694950573660739*^9}]
}, Open  ]],

Cell[TextData[{
 "List Plot of the genuine and imposter distributions when measuring the \
distance between the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["fb",
  FontWeight->"Bold"],
 " ",
 StyleBox["and",
  FontSlant->"Italic"],
 " the ",
 StyleBox["rc",
  FontWeight->"Bold"],
 " images."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}, {
  3.694950238244871*^9, 3.694950238427281*^9}, {3.6949504192406607`*^9, 
  3.694950421456979*^9}, {3.694950646002103*^9, 3.6949506483204803`*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fbGenuine", ",", "rcGenuine", ",", "fbImposter", ",", "rcImposter"}], 
    "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Cyan", ",", "Blue", ",", "Magenta", ",", "Red"}], "}"}]}], ",", 
   
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<FB Genuine\>\"", ",", "\"\<RC Genuine\>\"", ",", 
      "\"\<FB Imposter\>\"", " ", ",", "\"\<RC Imposter\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}, {
  3.694950241100892*^9, 3.6949502440435*^9}, {3.6949502913665*^9, 
  3.694950370055814*^9}, {3.694950650410201*^9, 3.6949507120590973`*^9}, {
  3.694951153748155*^9, 3.694951173842523*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 1, 1]], 
        PointBox[CompressedData["
1:eJxdWGlwVUUWPqAFzIgQFmUUZt4FWcYgEAmLLPq+sBMEA0kIWeDdJC/79vaF
mUoug4oLSFxYLJFcwRqWcYloCQwluYIi44BGBEvRIRdEBFSIUGogxJ5Auqk6
L39S5/Xt7rN+5zs9MK9qQUFnInqlE9H1/x1/zc73fxeOgysHQv6Aa1+Ipspn
h0u5G0Z1ITowa4CU49C3iMg9faiU+8KRSdqad+6T8p9w4IqoK35qiJQHYPEp
4Rz+pVrXMOa4EB/OUvIgbLuXrPSv1X2DseET0bDj8DgpD43R56+4Oo7IfnG0
lOMx6YwQB04mSPk+NO0X4upm9f1IVBJZr59V+iSgJIv0jabS/35896kQrRdH
SXk0Eu8m68yVwVJORHWrqHME46U8Jsb+seiXTHbqDyOlPA7bZpP2z3HKvvF4
qDvZ/fap/Q/ctKPj/wS8/JkQO/Yo/SeidDGZJ1rVeZOwuE44k0co/SZjfLv5
a1eMkPKD+Hs2WXHbh0n5IbwK0gsKlP5OvN6T7Me63i9loGd/wr76eztkA0h6
U4gzk9X+JOxtEXUr7pT5YCThdDcyV86+R65PwewToq7lY6mvMQVN7fmxYZM6
fyq27hcO9wvyPGNqjL3T4P8DGRdGyvOMafw8mo4u54TLUy31N6bjQhKZF95Q
/puBrzqRNryv2j8D69uu+0+T6zPRo13/t6rlfcbMmPjP4vlpzIqxfzaWDCF0
7yX9b8yG+37CKl36i5Lx+Fyyk1qlPkZyjH1z5H+1fw5+TSF71HYVr4cxZBBp
Y3vI/DQe5v6mudh7O1FLT+XfuVg9mawdh1W+zUNCBmHmjyp+8/DFeDImPazi
/QjeuiYcXdzKP4+gV3t97wgo/VMw531Rc3a91Acp8neZr0YK/meJhom3y3Ur
BenjSM8eoOpt/o14VF6V+mA+1l0VDaNPDJL75+P0IdEw6RGpvzUfnhntWs1T
8VuAW/aLmpv1hAUx/lpww76PnpD6Wgvw7h7RsKZV1VMqzx+k4rfDwnGhn/JX
Kq70Ib1ntbo/FVfvJHP18yo+aRg4meixeCkjDStuJ+2V8ypf05D1x+v2Snus
NKxeK1zaJpU/6ThxC1nZ1er+dI5vRjp2DyZz5hp1fzou/yKcG7fI82ghum4T
dZ9ulfZiIdfXWNiRbyG5bi3E8B+E45hb5U8Gls8kPems8l8G5v8kmnYXKP9l
cDywMuQ+5f9F2HdZOIo9Mp5YFFPPi3BcJ/PQBuX/RbBSCZlnlP8ysa8PGZF4
tT8T7zeKmoz9an8mkjsRnrxL5qOViedahGPKFWV/FkKdyHomTcrI4nhpZHF8
trJ4fChb/pf3IRvmb6Jp6qOyXxjZaLsiamq+VPpnY9lJ0XDT35TD8RQ53B4j
By+cuq6vlK0cVN1D+t5c5b/F2NOVjJ0vKf8vxrx40rPOKfsXY9UEMnxPyHVr
MY8XLcGf+5B9OVHWP5agbTIZdrWyfwle/lm4lp+Q9lhLeHzJhV8TyHC9pux3
IfmkaNo1St3v4v60XDH5o/P+punYfSvht6kqH3X5ndRX12PwSufxMHVuv6Vz
fLH1mP6Ui+ebRNOyS9K/Wi6vL+Ri2UbRcLPf67m8Hxq5vJ7NXHmuyrdcuH8R
rmv7Bsn7c3F0DOFvFYpP5PH60vJu9IcRV8fK+/M68PJBmR96HhZmEr0Wp/Ah
j/cLM4/ng5WHed8L1+5N0v92Hvq4ybrnYxW/fOCiaOiaqO7Pl78rPM3HHaeF
c9Ax2U/1fDy+RdSM8st1Ix93DiMsr5LrZj4+f0M4J6yW+lr5OOggY0I/+b2d
j6GdyXKnqvi7eb/Q3Jx/wc3v0924t4zMtT7VL93wtgixar3EP9ONOUVkL31X
7rfcPJ62m/czKuD1qBXw/oiCG/6LPp0o7y9Arz3C8dlE1W8LEB5NZk28PN8s
QP5/RV3/0wovCnB+jWj4+lPpD7uA9zMqvMEv6l+V+miFvL+isKNe/iK/1wt5
PzMKeX2bhZyfWoUcv+zCGD5WdCP+H20eI+8vkr/LdRRxvqIXcbwwinh/N4uw
sE00PPXAIHl/EeaWkjYppOqvSOazQ95TzO3RivFBJllfDVB4WIxsIVx7uij/
F2NonXAlHlP+L8alrqR/UqzyvxjRS6JpY6n83ipGlpO0nK2yPu1irj+V4NQ5
0TTnDrmulXC8QgnOXBJ1KxtU/pcgrn1Y+YdT8jujJOb+Ejz4u6gLfyv5k1XC
+ZFd0oHfu1X/LuV8Wyvl/BGlPB56KXZNa59q1iv8KcWyboSE4/J7sxQvXRCO
qb0V3pZyf9mlvD6ojPdTrYznC8rQ+VvRVHVS3V+GMeuEOL1A4U8Zn7fMMuw4
JuoKDqj7y5D+uRDnLqj4l+GVncLxbbniT+XYMoPs785JWSvnfBbl8jsV/3L0
PyzqjtSq/lTO68ksx9uT2lnICsVXyjF9jXD0e0/Fvxw1uYRe89T8UsHXtQo+
T6GCzzd6Bfp0Iv3Skwr/KnD5eyHausr4mRXo1pOQ1FvG16rg/rMrOJ5RJQqF
aOi+QOaLVsnzA5Xo972o2TRF1V9lDL+rRGoqGf9yqv5TiZ5fCmfuovHy/krO
X+1KjldUxfmgVsXrEVWcH+lVKDsumnLWqXmoCivHEW7yebMK0SOi5pNhqv9W
xdxfxfsXefj8HefhfFzz8PkwwROTHx6uf4oHTySQ9fN9ql49SOtDVnJI6uPx
YP1B4bw0Wunv4fGu9fB5wvRg7wjSu/WU59V7eL5bHp4fjR7Oj2wPfmrHg8P/
kfyi2QNzYnsXSlD47+X9Ls6LzHY8bVXvBZoXz74o6vTuMl8TvHjvvHBtSZb6
wMvxIsXL50Pdy/HJ4+X81/Dy+q/1cvw1vTy/6724bSxpz81QfNSLO24l0zdY
8pVGL5+/bO8N/P3moPR3szfm/cHH6z/OB/1D4eg/UNnv4/Nzgo/XA3y8H6f4
eP3pPt6/PD782JmMl3eoedSHZ+4i7VSL9Getj/MV08fjWe/j/djycb7c6MM3
74mapYMV3/J11Gu9st+Hi53IXrVK8Q8/n+/j/CjqS1rbc4qP+jl+JPg5XsHP
+VOKn+OB7ufzgscP71AyqzNV//ZzPKr1x+Cpn+dnvZ/jk+Xn9d3o5/3P9uPN
3qR1cUv8bvbHzA8BZHwhnOebpT/iAphy5Pp+GQ8tEBP/AIY0CcfRoTKfEeD4
mRKAcJDe+Jg8Tw9Am0DWtGHK/gDvD0agoz8lSXtrAzHzRADruhF9PknVfyBm
nglwfzYGOJ+2A3j0A1HXkCb1bw5gdxGZWz9Q7x9B/h4RF+T9Ugty/poQ5PML
gvIceX5KEGXrRFNrtZoXgrh7uxA38dIT5HhnBLH538K1uVqeVxvk+WYGeb+o
D/L3TCso38ckf2wMou0r4ajKlP6yg2hpFK4LB+X3zUHO3ymE3gPJmvKZlONC
HO+1EGauF66Mngr/Q4g/K5rSdin8C8lzpD0pIc539BAutuNR2waJj54Q50dG
iON9bYjzRVOdr+IfgnCSZR5S9R/ifL8xhLWzyErcqfh2CLOTiLZnSfuaQxyf
KMzzLS7Mv9fC/P0gIYzKqWT1GKTm4zDP55RwTPzDPD89MecbYdQdFc7EHhJv
asO8P5ph/v5ZH+bzuxXm77GNYc6n7TD6twrn8ipZn81habfCvwifp+MiONqF
zKcOyfO0CJ9nEyL4uICsrJGKn0Vw2xHRYF9V+R+JiX+Ev6d7IjHvuRHOb2oj
3J9mhPOH+gjvV1aE10djBNdyyK7/SfrbjtGnOdIxT8yWeEhRjtdxUc6vtCje
2SVq0nOkvQlRzv8Q5f0iJcrfd/Qox0dPFDv3CnGsWuF/lL+P10Y5HppRtDSL
hoemqvyPxsQ/yuf5xiierhfOm/61o5yvNUc5n6KleLtFON8tVPi/FKmNomFb
n3j8HzhhA8Y=
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 0, 1]], 
        PointBox[CompressedData["
1:eJxdWGl0VFUSvqKCC0ogAo4L/dgxILQsIsvYxY4gGAIhBAj9su9Jp/dm5iRP
GRU9IgEVQRn6jc4ZwONoXAZF1H6A44JEI5uCYLdsgmwBFNlrMkkV59TLnz6V
+27dW1VffVW3uuZUpuW3Ukr94zql/v/b8tfo6hlHx45evYH+AZMLVWL+ur4k
3wR5v6P78qZuJCfBkhUY1dsOIPkOWLwb3Rs/f4DkO2HxMnRrr/Uk+R443kWp
Vb/yuga9b1TqUNpQkrtBxxuU6e0xhOQeUHYFa8rbP0hyL1jfQ5lPd+L9feCV
/iqR24W/T4HGG5T2/PJBJPeDoh3oXjmS1/vDqLcRD49k+5zgzFDwxcL7SGa9
fN5AqFDK+vcRvv8gqOyu9E+zU0geDANOYzT9R/bPEBj3Ejo6f9Lnmp5HfsLo
+S1OkofCuqsYC55n+SFoLFRGLMb+GwaLL2BsyZSBJA+33W8EfJaprN338Pcj
4fAZjD4X43v/GX5bja59M/qT/DCcS1WJAW/cT7LLdl+AaScwvj6fvjcANm/H
WOfn+PxR8PpH6H69mvxljIIlezG6sZjtGw2f3qbU+XZkjzEaLiQrvV012zcG
thYp9erbdF9jDNy0FV0JB6+Phcd/xti3a/j8sdD6KLrr/snr46BXFN2DdpK/
jXE2+8bDxgasyWhH/jHGw+/3K4gO5f0TIGs/uvr+0I/WJ8Dzf1La/vPsr4mg
DVPW2N6sfyLMSFbWpCDvf4R+B9P6I3D9ZqxxBDj+kyDlCMZnfEj6jEnwcYrS
vnyO9U+WeDUmQ3Kesrpv4fs/CvssjA2/jeJjPEr/70G/U2D7W+gatpj9NwX6
9VfaugqO/1SZP8ZUyHtAwaIg638MKsYo6/Zu7N/HWvy1me1LhVW/YfT6LnQ/
SIUX4hh//AzF30iFT35F9+pJtG6lNsdrsYvxMQ0G/oGOZdtIH0wDR6bSXnqf
/T0Nzjdi7OExvH8aRLZhzTe9+fw0mR+QBqcPYuzKSsZTGqzZjI68Fwl/Vhrs
/QRr5vcg/Wo6eMY3WTmV4gHTYaFTWaf7sb+nw9+/Q3x3A+mzptvyZwbsP4rx
yR0JzzCjOd8mHGc8zYDk65R+5pletH8GLBqmDO9Cjn+6xCek2/CcLvPJSodl
E5U16APSp2bC1F/Qvf41sgdmNt/n66XDaP9MyIqia9L9dF9rJmTsQldKEeMr
A2aew+jFUxR/yJD4MzLg1m0YS1wk+6wMuHoZY7HxnP+zJJ5gFkTOYHxVCfGn
MUv625oF9yarxNlBvD9T4hsy4WRXBatWM34yYdkhdD9Rwf7PtJ0/G66MVEai
mu2fLe9jzIZD3yJeOsX2z4bJG7HmyHLmsznQ8SC6uu3k8+dA+nbE+5I5X+fA
vu5KOz6OZGsOnLiK0fqvGL9zYf9XWPOXJ3n/XLijh1ILHuD7z4UX96Nj9AWO
31yYg+je0JrrSxb8sg1df+3J+7Ng4QmMJb3B+Zgl88HKstW/eTb758Ga1kob
V83nz4NbOihj42nOn3nwdgeltc7j893wRA9lOcvIn+CG8w3o7p/K8XM389mz
D/H93TJflQ6Pr8JYxRLar+lSP+hwdz1Gt9XS/XRd1htDl3xt6vBOR6WPP0T2
W7qMT0KHvsfQsTOP45dNv5QvWrYNT9mSr/RsWDBB6aOOMF9nQ022gvZTCR9m
NrS6XoG1h/RZ2TDbpbS5awj/iWx4+Salto9g/+fA1huVuXYq9QdajuQLyIHo
DnSdrafv9RzYfRHxrjYcnxxYdA5rlnQlf5k50DlFGZuPk2zZ9CdybPUvV36v
5Uq+hlzJv3qu5DsjF8LfousbndbNXJhwCWMTO3K8m/RPUonpx0hfIhf23KvM
Y39j/OTJeGh5sBTRlfYf2g+03oXW9TyYmqL02UeZn/Okv8w8ye9Wnsz3RJ7k
d5Uv67WWL/ML8gFOYeyL1yl/9fzm+CVn8Pn58N6IJtZ7muwz86HwDqVdWcr2
58t6mMiX+aYKZDy0Als+FkDNVYw7vqf46QVQkqXMny4xvxfAxC5KXzGE419g
s78ADm7F2IjHSE4UQJu1GL1WH1Sh7Ae1QtkPQCEMfhnxYBrVP70QpvRW2l3v
cP4Vkh7Cg1ko+1WrUOZvohBuvFlZ1nfcvxVJfteKoL6PgosHOf5Fkh/1Ism/
RpENf0U2/Bc18/HRk/R9oghGb8No6ADnXzG8dx5d6wrY/mK4uB2jJ98aTucX
w4utlNHhc9KnF8OmZGWEUzj/imV+msWyP7WKbecXy35VlUD6g0qfcw/p00qg
3d0KNtVR/YcSOPsL4pU2zD8lcOYzdJdvYPtLYEt+U1XqT/XcLIE/6tFxsjPH
vwSqeimzOpPxX2J7L5XK/NRKYdLPGP9wAPNPqaxXemlzPdcnMP5LYf0NCv4Y
w/gvhRXHMP5ENeHVKgWjqzKcYcqfRCl06q1gQSX7v0z2w1qZLf/KYMdpdF3L
d70MPvgUcWc12WOUAbqUZW4lf5hlEj9WGVzZjY7KTOb/MhlvVS7joZXLdSiX
/YBeDq4ByjgymutbOTzcViUyQnSeWS7rgVVO53D+l8v3jqpo1tfnY45/RQte
RnH+VUD/W1Qi/XB3Or9C+tuokPllVkDXC4i5X7P/Kygfmf8r4EuHMoZ15v6v
Ur7/tEr4y53KGvAk51+l5BO9Ur4/jEr53jQrpT+sShi8B/G/Ezn/K+V7SHng
nLOpS3iT9Cd54Ifv0b1lH9cDj+RXp8fGDx7o2U1pQ24nPKR64EBbZexdy3zh
kfXR44HV41Xi0FF+H3hkf1jrkf2U6YHq5eiqiJJ/6jyyPlkeeH4XOkb1If0N
Hjh1nUrUzyQ54YHEYYx+fZbw3+iR9UtVyX4pqQouPti0bQXjoUryi7NK9g9Q
ZbO/aX8nZS5+geKhV8n+w1Ml+cmogldPomNMB/JHbZXsP80qyfd1VRA4ju5V
Js0nrCrw91NazQHiy4aq5v7klX6c77b7NFbJ+Cqv7M+SvLZ67JXzB6dX5j94
m+tzm0GEj1Qv+L/C2KJFjFevfC94vNIfhre5f/RU031rvZKPTK98j9d5be8p
r+SHBq+sVwkvrPwGYwN/ou8bvRIvyifxmOST+NJ88GwDRo0ckp0+eHcnRvM/
5/7AB8/Uo9syaT3VB87fMJ5+mOuVT+a3x2fjD5/sT2p9En+mT75n63x0b35P
+Jr5pvvCEWQ/r3O/4Wvh73WMf598Hyl/M74H3U7nJfkhu6+y2qZxPfDD0CYt
y54mvDj9sp6BX/YrqX5I76TUre9z/P0wr6eCtu3JPo+/Bd/nCK+GX76Ha/3S
PtMv+avOL/szyy/5u8Ev38sJv8yvRr+N/wNyHpYUaOk/qsg/WgCeWo01A3x0
P2dAzkMhIOdbqQHpfz0g31uegOyHjYDs12oD8r5mQOKtznYfKwC3DlHa0vFs
fwBaHcD4qTjbH5D9eWMA9ujK3LqS54lBKH0Z45eq6fukoOxvtaDEizMIHx3E
+L8mUj2DoJzPpAZlf6YH5XmeoMxHIyjzozYo+1Ez2Nz/TPmRzq9r0n8WHUUe
zv+gnJ80BOHyXJWoO8H9VlDyXaNNViFpb1JI9l9aSOLbGZLxgxDpIX+khsAc
3vTKcfJ7KSTnxZ4QXN6F8WvvbSMk87s2ZOsnQi38oJP/6kK2eRafT/obQrJf
SYQkXhtt9qiwfE8lhW39eFjyvTNsm7eFof0GdHw3nOTUsJz/62F4aopKjLrE
9oflvMIIN/crnTfRem24Zd4ykt9TYZj/OzqiC4gv6sJQN0RZu24m2Wo6/yo6
3vWTfxrCsr4mwjb7w3KeoiI2/o/A9AaMrU2m+2gROQ90RuQ8ByLw4Vil7lzO
9S8CP9+sYG8WzT/0iJy/eyJQfwhdu98jvBgRG/9HZL0zI3J+VReR80srIt9T
DRGYmanUm0mUj4mIxFtjpLk/W9nA86/5Lf3qYK7/86/x6/8A1ddf2g==
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[1, 0, 1]], 
        PointBox[CompressedData["
1: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
         "]]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[1, 0, 0]], 
        PointBox[CompressedData["
1:eJxdWXd4VFUWPzQJghJBQAHJIxRRAoSSUMMceodQk0BgXnpP3vQZVs1T/Fxx
XQ02LKzz0E8X5dvdyKp8FpwRFT4NYGgRJDKPYqEm4tKCcjf75h72O5N/8t3c
++7pv/M7N/1zq5YUtAWAzW0A/vc7+tNs639diLy6FJR/QNEo7E0pE+Q6DtOS
ALfcPk6u4zG3M6gPLaL13Zg/EnBvYqpc34ONAPqqtIly3Rff6wHqzB/HyrWC
i86KYKAT7Sei/UdRvdVG9w3ESoDwhYRJcj0YXx4KRt4E2h+C++8E9d2q8XL9
ICYNB+XDEN2XhK+cE5Gpdjo/HJ84K6pr3iP9kvHN+yC8rAPtj8RUBfDvdWTv
KLxxRdhEJe2PxgUdITxnZppcj8HE34UtfyzZk4IZ9wLOe5HuT8WH+7RKCdD+
WGx7SkSaupF+49Dy9ww6Px6rBoD6WQ7Jn4BrOoA50U3yJ+I7P4mQewXZOwln
XBPVcZl0Pg2nHxaRsXPp/GRce1kkBJtpbUOtHUDlbloj/vuIiAxKk/fpiNd/
E2LyCNJvCo+XPgWLe4G64wOSPxVtXUE58o2Mjz4VM4+K6v/HYxqPrz4NO3SC
cHg/yZ+OnvPC/roh7den488pYFyIkPwZmHZG2GadJ/1mWPaPOUHfz8Sh50RC
j+BouT8Tc4ZCeM9Gkj8L99cJ+9dv0/ez8K6bImGbm/ZnY8tBEbz4T+k/fTY+
NhDCWhn5c05U3ztpfw7OGwhm1jMkfy6uuCKCLU3kn7l4ezfQH11F98/DrxqE
2FhI38/DlY0idHYdfT8f554QEf+/6Pv5+Fh7UJU3qP4WYLf+EN7Zh/YXYGQw
qElryD8L8fs/hO2YRv5diB+1B/QF6P5FePg/orp3ilzri/DkGRGpe470S+f5
hel4NR6Uro10Ph0L7gJzUlDKD6ejOwkUMYq+X4y+JhHs11nu42J8/4ao/vBV
0mcxvlonqp1PSvvDi/H5RDBz+5L+S7DTKDA3TJf7uMSq18fySf4SPNEJsHE1
yV/C8wWW4sY4gO7jpD641Ir3+r0kfymmDwPjlv3hpfjaRZEwbSf5Zxn3Ly7D
7m1A3XaG8nGZhWd/VeX94WVWfp+NUD0v5/mEyzGUDMZsjeK9HDueF0FtntQn
vDym/lZgbQqEGzqR/Svwg2Mi4e1UqqcV+KfDIrRwB/lvBToGg/FIFvkvA+NG
gLF/sTyPGTi0M+hv9aN8z5DnSP+MmPzIxLU9QK/qLfEMM/GFtqAfiJNrPdOK
36XP5f3hTFx+UIgz2+n7LB5PzMKnRgNss5H9WbhKCPuNRpnP4SzsfQeoow9T
fa3ETftEaNte6W9ciXUnhciskef1lfjdVRFaOVzuh1diXp0I9jlN8V/F78PW
9QUhEjuR/1ahfQjoT99L9q/Cfqmgf/ky6Z+NBftE5LXelP/ZWLhfJDS+R/mT
Lc+R/dmYch/Az5Mo/qvxwEiAG2+S/astfySup/xdHRP/1bihUQQ/LyH5a1A7
JYKr7RS/NZh3JxgPnaPv10Txex3Ff01M/7DjlG+FffvHlH/2GLy1Y/VNEQl2
Jv/ZrXh84iL9VSue77TItaJG6+klskfl+a6qln82baH7VXwgDrDgpJRvqJjR
IGxnh5G/1Wj93y3XZut6OJinsin+ORyPlBzcdV0Et3xJ9uTEyM+Jwcvo9/N6
SH8ZOXhtNISDX5P8HFxaL0Lv9JL6mjk45nshvppNfCKX93sll/sbc3HL4NYq
zpb+U3OxZ0cwnT9QfeVyvDNyOb6Ec/FmX1Dql5H8XIsf/OUg4Wce/nFUJIyY
KPVR8iw+8sIQqoc8zLwuIh8flPtqHo48JKpnVJL9eZyPGHk49YAIjp1K9ufh
Mw0iYUo3WU9mHtpGgP5LA+VfPj+v5Ef7VQH5Px/XnRbi2Q7k//woX3qL6juf
9w8jH9U4UD49Tvmaj4NPCvuhIRT/fOzaB3BnLdlfwPmOUsD5ChZg23aA4e8n
S/kF+MMAUJKWkvwCK96R96V+RgHXL1zA5ZkFvF6hkOePUojtHwBl/yvUDwp5
vNRCq34m3k7xL8SmE6J6xwDK/0LMTmzt6v2pXxXiuRvCvuBFGT+zEL17hLhj
KskvwnGmqL7tAYp/ET7dE8zNIRkvLOLxUous+ih+ivCxiOOhUYRlLcI2rAvh
bVFM/hdF8X0QyS/G5yMiMuUG+b8YW3qC8ezz5P9ieU7uq8UxfLAY//arsH/x
q9w3inFyFzB77ST/F2PnAyJktsj7zGLs9SDoX6yj+JdwPq+U4JAhYFwOUP2V
cHxXS6x+3fYCxb+E8wOjBHu0B+PSP8j+Ej6fmCXoGwVGaBnlfym2pLb+eRfZ
X4q554TYGk/xL8VLHUHdV0z5X4p/vgOUzWfJ/lLOL41Sy14lnfC+lM8XZine
PRBg3RXCvzLeT5Uyvo9l+PH9YM5qIvwp4/iql3G8Mspw528iYcs4kl+GWX1B
r9tM+V/G6xHKeT9SyqP50p3kl3N8UMt5/ujlPB+Ncj4/hMs5Hprl2O24CG0u
JfkVFt+6tF7ap1RwfMcK/OmSCO7ZRPIreP/QKzjfMCrws2Ggzp5F+FfB8cms
wD57RfBADeF/pfxN8a+08nndccLfStx1VNgy55P8Sp6feqXVD7O3EP5V4rPX
RWjDMOILlZyPmZVY0xfUk+OJv1TxeUKpsvr7iHeJj1Xx+KpVPN/1Kiw+JOyb
JpH/q6z63LWV7K/C88eE+LSB6r8KsUmEZr1E84WG2+4B4wlD3h+vcf6haNH5
pqtcJ2u836PG5910DTungHKgJ/UrDS9/IyLD1kr5msbzTdewU5OIaHOk/BqN
+8vQOD+q1Th/CWs44TZQM7rK8/Uar1dTw5u/i1BoppTfrMXMbw586Jqw2xPJ
fge2uw308GWy34FvtWrx+EXpr2SHNV92GUn14cCnUwEvTZfn0x2cn6kOPh9o
DqtefplF8XPwebDGgdMuC1vcl9TPHfz9o9YR7U8TCF8d+ElH0Le/Jtf1Dj6v
mg7OZ5sdPH/AGRN/pzXfP7xOnlecnJ8kO/l8iE6OR+lOXu+qE48pYJ5rL+/X
nBzvdSfXr8Yp9SI+5YyJvzOmvp148biw7Wgvz9c7eX2adJ9cNzt5fYEL+zYL
2ymPvD/ehdeaReiRHdSPXfx9KdmFv1wWkS5fET65uD/SXXw+VV2cD2gujke6
i+dvjQv1/qDXhij/XZxf1rqs+aNoMdnvwu39Qd39itS33sXzwXTxfG128Xkb
3LjwZ2H/6A2y342DIiLh0GCaB9ycjyS7rfeY3U9S/but95PKFqp/N7YZAEZ9
B7LfjVuTABoeofp38/6gu/l7Vo2b8zXDzflYrZv7P+y28GLQFap/t1XfR68Q
3rktfKm9QPnvjpnfPZZ+L+2T38d7eL4qHo6HyR6rHivqqf490XzvJv2X7sG0
r0Uk9VfqFx78dijoawfKfc2DM4+IhGtHqX94eL3VeGLmKQ/vb7Uejl9hD+e7
9R7On00P53PNnhj+4+XxjvdyPFC8fF5O9uKH/UDZPYb6kxfHtwOl1w7Kfy9/
L1K9nB9q3hj+4uXvHTVeHP2dCM24RPXvteoh+Tcpr9ZrzTvr0+Q67OXzSr0X
9/4obFk/kf1ePg82ezk+go/XX7yPv+cpvuh9Tjl/JPti3gt8fH5M9/H5W/VF
+71f1oPm43xe9+H4UyI0c5O8v8YXM0/4uD21PtzZHfRxgyj+Potvb9wj1/U+
/l5t+vh7T7OP4wv4OX7G+/n7lOLHR9uAYo6U/kj2o3FVRKY9TvzIz+ehdD/H
H9XP+b7mx31xYJ45Qu9rfv7+XOOPmeda9esP+Pr9FH8//t4gIpUbiF/6+ftH
vZ/Pc6Zf2kn2+3HUVZFwC48ggKf3iNAn2+R+fMB6j+v5HOV/gPs7OYBXkkFP
8FD9B3i80gM4/7RICNxH9gd4PmkBa976PIPe1wI8n2oC/P8fRiDq/zzqfwHO
L8IBTKoToen3U/0HYvhegONpcyDmfXotrj4pbEOPEP6vvfVe9l8DPkCq
         
         "]]}, {}}}, {}, {}, {{}, {}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 417.}, {0, 30.8544960022}}, PlotRangeClipping -> True,
      ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 417.}, {0, 30.8544960022}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"FB Genuine\"", "\"RC Genuine\"", "\"FB Imposter\"", 
       "\"RC Imposter\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0., 0.6666666666666666, 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}, 
   3.6949502451716013`*^9, 3.694950370852537*^9, {3.694950674870565*^9, 
   3.694950681389696*^9}, 3.694950712814801*^9}]
}, Open  ]],

Cell[TextData[{
 "List Plot of the distances between the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["fb",
  FontWeight->"Bold"],
 " ",
 StyleBox["and",
  FontSlant->"Italic"],
 " the ",
 StyleBox["fa",
  FontWeight->"Bold"],
 " and the ",
 StyleBox["rc",
  FontWeight->"Bold"],
 " images for genuines and for imposters. The x axis represents the Euclidean \
distance between the fa image and the specified other type of image. The y \
axis is the index of the distance in the input array and does not impact the \
distributions (essentially, this is a \[OpenCurlyDoubleQuote]histogram of \
dots\[CloseCurlyDoubleQuote]).\nAnother way to say this is  that if you look \
at a particular y value and draw a horizontal line, the Euclidean distance \
between that subject\[CloseCurlyQuote]s fa and all its other images will lie \
on that horizontal line, with their x coordinates determined by the value of \
that distance."
}], "Text",
 CellChangeTimes->{{3.694950130975534*^9, 3.694950166912586*^9}, {
  3.694950238244871*^9, 3.694950238427281*^9}, {3.6949504192406607`*^9, 
  3.694950421456979*^9}, {3.694950646002103*^9, 3.6949506483204803`*^9}, {
  3.694951398073063*^9, 3.694951398865193*^9}, {3.6949514755483*^9, 
  3.694951526117365*^9}, {3.694951640418604*^9, 3.6949517147321253`*^9}, {
  3.69495181446554*^9, 3.694951819615766*^9}, {3.694952010951602*^9, 
  3.694952065216228*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"rotateData", "[", "d_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"d", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"rotateData", "/@", 
    RowBox[{"{", 
     RowBox[{
     "fbGenuine", ",", "rcGenuine", ",", "fbImposter", ",", "rcImposter"}], 
     "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Cyan", ",", "Blue", ",", "Magenta", ",", "Red"}], "}"}]}], ",", 
   
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<FB Genuine\>\"", ",", "\"\<RC Genuine\>\"", ",", 
      "\"\<FB Imposter\>\"", " ", ",", "\"\<RC Imposter\>\""}], "}"}]}], ",", 
   
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.694950027243482*^9, 3.6949501265134706`*^9}, {
  3.694950241100892*^9, 3.6949502440435*^9}, {3.6949502913665*^9, 
  3.694950370055814*^9}, {3.694950650410201*^9, 3.6949507120590973`*^9}, {
  3.694951153748155*^9, 3.6949512949821978`*^9}, {3.69495132621673*^9, 
  3.6949513397118187`*^9}, {3.694951407315377*^9, 3.69495146325213*^9}, {
  3.69495152856632*^9, 3.694951625137594*^9}, {3.6949517402159*^9, 
  3.694951803184064*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 1, 1]], 
        PointBox[CompressedData["
1:eJxdWGlwFVUWvqAFzIgkLMoozLwGWUYQiARQFn1f2BfBQBJCFnid5GXf3r4w
U0kzqLiAxIXFEkkL1rCMS0RLYChJC4qMAxoRLEWHNIgIqBCh1ECId0JyLtZ5
70/Xed333rN+5zt3QG7lgvzOQoiXOwlx/fneb9JxcOUAiPZfk/Pa57Kx4pnh
JAuM6iLEgZn9Se6GPoVCuKcNITkejgyhrXn7HpL74MAVWVv05GCS/4TFp6Rz
+BfqfX+MOS7lBzOVrGHb3cJK+0qdNxAbPpb1Ow6PI3kQuD5DcHWcEPYLo0n+
KyaekfLAyQSSh6Fxv5RXN6vv70GFENZrZ5U+I1GcKfSNptI/Ad9+ImXLxVEk
34vEO4V15sogkkejqkXWOoLDSE6MsX8M+s4Wdsr3I0kei22zhPbPccq+cXiw
u7D77lPr77uhd8fzfrz0qZQ79ij9x6NksTBPtKj9JmBxrXTOHqH0m4j72sxf
u2IEyZPw9yxhxW8fSvIDeAVCz89X+j+I1+KE/WjXe0l2Iq6fwL66u0kGkt6Q
8swkWm8Ae5tl7YrbVT4k4XQ3Ya6cdRe9T8KsE7K2+SOl72Q0tuXHhk20vzEZ
W/dLh/t5pc8Ubq8xBf4/COPCSNpPTOX7GVPR5Zx0eaqU/tNwIUmYF14n/xnT
8GUnoQ3vo9ZPx/rW6/7T6P109GjT/80q5d8ZPP7GjJj8nBlj/0wsGSzQvafy
/yy47xVYpZO/jFl4bK6wk1pUPGfH2KdktX4OfkkW9qjtFC9jDgYPFNrYHio/
H+L+NtrkW4VojlP+nYvVk4S14zDlmzEXCekCM35Q8ZuHz+8TxsSHyF/GPLx5
TTq6uJV/HkbPtvreEVD6P4w578nqs+tV/iTTk/IVyfifJesn3Kr0TUbaOKFn
9ad6s5Lb41FxVeX/fKy7KutHnxhI6+fj9CFZP/FhFc/58Exv02Ie+cuaj5v2
y+rf62kB9xcWtNv34eNK3wV4Z4+sX9NC+lkLYvInBb8elo4Lfek8pOBKb6HH
VanzU3D1dmGufo7iY6VgwCQhHh2m8iMVK24V2svnKf5IReYfr9tL9hipWL1W
urRNlC9WKk7cJKysKnV+Gsc3pGH3IGHOWKPOT8Pln6Vz4xbaz0pD122y9pOt
Kj8Wcn2xsCPfQvTeWIjh30vHMTfFw1qI5TOEnnRW+S8d83+Ujbvzlf/SOR4Y
6fSd8n869l2WjiKPws9FvP6wCMd1YR7aoPy/CFaKQMYZ5b9F2NdbGJFhan0G
3muQ1en71foMzO4k8MQdKh8z8GyzdEy+ouzPQKiTsJ5OJVlkcrxEJsdnI5PH
x8qkdao+smD+KhunPEL9AllovSKrq79Q+mdh2UlZf8PfVlYMnmZze5CN509d
15dkIxuVdwl9b47yXzb2dBXGzheV/xdj3jChZ55T9i/GqvHC8D2u8Goxj5e1
GH/uLezLiar+l6B1kjDsKmX/Erz0k3QtP0H2GEt4fK0l+CVBGK5Xlf0uzD4p
G3eNUue7uD8NV0z+uGL6m47dNwv8OoX213T6n/SFzvFK13k8DJ3bb+ocXyyd
56Ot47lG2bjsksqfHF5fWg6WbZT1N/o9cng/1HN4PRs5tA/ZY+bA/bN0Xds3
kM7PwdExAn8rJ3/aOby+RG57fxhxdSydn9uBlw9QfiAXCzOEeDWe9NdzY/pF
Ls8HMxfzvpOu3ZsUXuWit1tYd31E59m5wEVZ3zVRnZ9HT8p3LQ+3nZbOgceo
nyIPj22R1aP89F7Pw+1DBZZXqn6bh89el87xq0lfMw8HHcIY35e+t/IwpLOw
3CkUDzuP9wvh5vxLc/Pz4MbdpcJc66P46G54m6VctV7xATfmFAp76Tu03nTH
4KWb9zPbzetR5PP+qOW3+y/6VCKdn4+ee6Tj0wnkXz0f4dHCrB6m+nk+8v4r
a/udJn3NfJxfI+u/+oT8YeXzfmbnt/OLuldU/RTw/qoVdNTLX+h7FPB+phfE
1HcB56dmAccvq4DzMbugPf4fbh5D5xfSk95rhZyvoJDjhV7I+7tRiIWtsv7J
+wfS+YWYWyK0iSFVf4WUzw46v5DbI4rwfoawvuxP/tKKkCWla08X5f8iDKmV
rsRjyv9FuNRV6B8XqfwvQvSSbNxYQt+bRch0Ci17q+oXRVx/uwinzsnGObep
/lvM8UorxplLsnZlvcr/YsS3DSn/cBK/04tjzi/GA7/J2vA3xJ/MYs6PrOIO
/N5N/rSLY/h2CeePWgmPB0qwa2rbFLNe4U8JlnUTSDiu+GYJXrwgHVN6kf5m
CfeXVcLrwy7h/VSU8nzRStH5G9lYeVKdX4ox66Q8vUDhTymft4xS7Dgma/MP
qPNLkfaZlOcuqPiX4uWd0vFNGb23S7FlurC/PafmkzLOZ7Uy+l/Fvwz9Dsva
IzX0vV4Www/L8NbENtaxgvxjlmHaGuno+66KfxmqcwR6zqP8smPei3I+T2nl
fL5BOXp3EvqlJxT+lePyd1K2dlX8qhzd4gSSelF8zXLuP6uc45ldjgIp67sv
UPNNBc8PrQJ9v5PVmyar+qvg/E6vQEqKMP7lVP2nAnFfSGfOIprrzArOX60K
jld2BeeDopLXo1bJ+REqUXpcNmavI3v0SqwcJ/A7n69E9Iis/nio6r+VMedX
8v5lV8bM3x7Ox+M9fD7UPDw/Ejxcf3jweIKwfrqH6jXZg9TewpodUnjpwfqD
0nlpNOnv8fB4Gx4+T9R4sHeE0LvF0X6mh+d7nYfnh+Xh/KjBgx/b8ODwf4hf
2B6YE9q6TgJ93+SJuW/wIqMNT1vUfUG8F8+8IGv17goPvXj3vHRtmU36JHg5
XsDL58NkL8cn3cv5r8fL69/wcvyt8fL8Nr24ZazQnp1O9tR5cdvNwvQNIr5i
efn81eBtx9+vD6p+4+X3D03emPr3Qf9AOvoNUPb7+Pys+Xg9JPh4P4aP11+y
j/cv3YcfOgvjpR3Urzw+PH2H0E41K/7i43ylxsfjafp4P67zcb5s+fD1u7J6
6SCSG3wd9Vqn7PfhYidhr1pF/mzyxcz3fhT2EVrrs+TfeD/HD83P8SrBz/kT
/BwPkv18XtD98A4RZlUG+dfj53hk+Dme1vh5fpp+jk91/pj69vP+1+DHG72E
1sVN+G37uT+b/Ej/XDrPN6n+F8DkI9fXUzziAzHxD2Bwo3QcHUL5nBDg+IkA
pEPoDY/SfskBaOOFNXWosj/A+4Mn0NGfklT/CPB5oiaAdd2E+Gyiqv8A5wd1
Ae5PK8D5dEMAj7wva+tTSX87gN2Fwtz6PvmrKcDvI0SQ98v4YMw8EuTzS0KQ
1tH+CKJ0nWxsqaL6TQ7izu1S3sBLPcjxzhPE5n9L1+YqxV+CPN9qgrxfmEF+
n1kXpPsx4o9WEK1fSkdlBvmrIYjmBum6cFDxjSDn701B9BogrMmfqvuvEMf7
+BBmrJeu9DiF/yEMOysbU3cp/AvROjUfhDjfSQ7hYhsetW5QfC3E+ZEnxPHe
CHG+WKP2V/EPQTqFZR5S9R/ifN8KYe1MYSXuJLkhhFlJQmzPVP02xPGpKcTz
TYT59/Fhfn+ghVExRVg9BlJ+JYR5PiMcE/8wz089Zn9PGLVHpTOxh7pfCPP+
WBPm959mmM/vdWF+H2uFOZ9uCKNfi3Qur6T6tMNkp8K/cMz9cgRHuwjzyUO0
X3yEz7NaBB/lCytzJPk3IYJbjsh6+6rK/0hM/CP8Pl2PcHs8Ec5vjAj3Z02E
8wczwvtVXYTXhxXBtWxh1/1I/m6I0ceOdMwTswgPmyIcr0WU86v4KN7eJavT
shUfjXL+lxDl/QJRfr+THOX4qEexc6+Ux6oU/kf5/bgR5XhYE0Vzk6x/cIrK
/2hM/KN8nreieKpOOm/4tyHK+Zod5XyqKYq3mqXznQKF/0uR0iDrt/VW/G8p
/g9oTAPG
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 0, 1]], 
        PointBox[CompressedData["
1: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
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[1, 0, 1]], 
        PointBox[CompressedData["
1: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
         "]]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         AbsoluteThickness[1.6], 
         RGBColor[1, 0, 0]], 
        PointBox[CompressedData["
1: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
QKo=
         "]]}, {}}}, {}, {}, {{}, {}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0.}, 
     PlotRange -> {{0., 30.8544960022}, {0., 417.}}, PlotRangeClipping -> 
     True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 30.8544960022}, {0., 417.}},
      PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"FB Genuine\"", "\"RC Genuine\"", "\"FB Imposter\"", 
       "\"RC Imposter\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.16500000000000004`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0., 0.6666666666666666, 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.694950068900639*^9, 3.694950127790386*^9}, 
   3.6949502451716013`*^9, 3.694950370852537*^9, {3.694950674870565*^9, 
   3.694950681389696*^9}, 3.694950712814801*^9, 3.694951245669045*^9, 
   3.694951300223398*^9, {3.69495133163838*^9, 3.694951340351562*^9}, {
   3.694951435796805*^9, 3.694951464169969*^9}, 3.694951577647393*^9, {
   3.694951615621798*^9, 3.694951625785763*^9}, {3.694951750212654*^9, 
   3.694951765418528*^9}, 3.6949518041712008`*^9}]
}, Open  ]]
},
WindowSize->{925, 918},
WindowMargins->{{-1810, Automatic}, {68, Automatic}},
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September \
21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 93, 1, 30, "Text"],
Cell[654, 23, 1426, 46, 180, "Input"],
Cell[2083, 71, 334, 11, 46, "Text"],
Cell[CellGroupData[{
Cell[2442, 86, 453, 12, 32, "Input"],
Cell[2898, 100, 50439, 1020, 240, "Output"]
}, Open  ]],
Cell[53352, 1123, 383, 12, 46, "Text"],
Cell[CellGroupData[{
Cell[53760, 1139, 500, 13, 32, "Input"],
Cell[54263, 1154, 49323, 1006, 240, "Output"]
}, Open  ]],
Cell[103601, 2163, 530, 19, 46, "Text"],
Cell[CellGroupData[{
Cell[104156, 2186, 707, 19, 54, "Input"],
Cell[104866, 2207, 68163, 1420, 240, "Output"]
}, Open  ]],
Cell[173044, 3630, 517, 19, 46, "Text"],
Cell[CellGroupData[{
Cell[173586, 3653, 645, 16, 54, "Input"],
Cell[174234, 3671, 66466, 1382, 240, "Output"]
}, Open  ]],
Cell[240715, 5056, 565, 19, 46, "Text"],
Cell[CellGroupData[{
Cell[241305, 5079, 691, 17, 54, "Input"],
Cell[241999, 5098, 32671, 609, 247, "Output"]
}, Open  ]],
Cell[274685, 5710, 578, 19, 46, "Text"],
Cell[CellGroupData[{
Cell[275288, 5733, 795, 20, 54, "Input"],
Cell[276086, 5755, 35083, 666, 247, "Output"]
}, Open  ]],
Cell[311184, 6424, 1447, 33, 122, "Text"],
Cell[CellGroupData[{
Cell[312656, 6461, 1516, 40, 96, "Input"],
Cell[314175, 6503, 35367, 670, 244, "Output"]
}, Open  ]]
}
]
*)

